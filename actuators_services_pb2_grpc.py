# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import actuators_services_pb2 as actuators__services__pb2


class ACStub(object):
    """
    em um primeiro momento é definido esse arquivo .proto
    nele é criado um serviço contemplando dois métodos, um que é mandado uma requisição
    e é esperado uma resposta e o serviço de converção stream
    o grande objetivo do gRPC e do PROTO é a padronização

    service TemperatureConverterGRPC {
    // recebo uma entrada e retorno uma resposta
    // se eu quiser fazer no formato stream, preciso colocar stream antes
    // Entrada: as mensagens que indicam ao compilador o formato padrão
    rpc convertReqResp (TempRequest) returns (TempResponse) {}
    rpc convertStream (stream TempRequest) returns (stream TempResponse) {}
    }

    message TempRequest {
    double tempFahrenheit = 1;
    }

    message TempResponse {
    double tempCelsius = 1;
    }

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.switchPower = channel.unary_unary(
                '/AC/switchPower',
                request_serializer=actuators__services__pb2.Empty.SerializeToString,
                response_deserializer=actuators__services__pb2.TempPowerStatus.FromString,
                )
        self.changeTemperature = channel.unary_unary(
                '/AC/changeTemperature',
                request_serializer=actuators__services__pb2.TempRequest.SerializeToString,
                response_deserializer=actuators__services__pb2.TempResponse.FromString,
                )


class ACServicer(object):
    """
    em um primeiro momento é definido esse arquivo .proto
    nele é criado um serviço contemplando dois métodos, um que é mandado uma requisição
    e é esperado uma resposta e o serviço de converção stream
    o grande objetivo do gRPC e do PROTO é a padronização

    service TemperatureConverterGRPC {
    // recebo uma entrada e retorno uma resposta
    // se eu quiser fazer no formato stream, preciso colocar stream antes
    // Entrada: as mensagens que indicam ao compilador o formato padrão
    rpc convertReqResp (TempRequest) returns (TempResponse) {}
    rpc convertStream (stream TempRequest) returns (stream TempResponse) {}
    }

    message TempRequest {
    double tempFahrenheit = 1;
    }

    message TempResponse {
    double tempCelsius = 1;
    }

    """

    def switchPower(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def changeTemperature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ACServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'switchPower': grpc.unary_unary_rpc_method_handler(
                    servicer.switchPower,
                    request_deserializer=actuators__services__pb2.Empty.FromString,
                    response_serializer=actuators__services__pb2.TempPowerStatus.SerializeToString,
            ),
            'changeTemperature': grpc.unary_unary_rpc_method_handler(
                    servicer.changeTemperature,
                    request_deserializer=actuators__services__pb2.TempRequest.FromString,
                    response_serializer=actuators__services__pb2.TempResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AC(object):
    """
    em um primeiro momento é definido esse arquivo .proto
    nele é criado um serviço contemplando dois métodos, um que é mandado uma requisição
    e é esperado uma resposta e o serviço de converção stream
    o grande objetivo do gRPC e do PROTO é a padronização

    service TemperatureConverterGRPC {
    // recebo uma entrada e retorno uma resposta
    // se eu quiser fazer no formato stream, preciso colocar stream antes
    // Entrada: as mensagens que indicam ao compilador o formato padrão
    rpc convertReqResp (TempRequest) returns (TempResponse) {}
    rpc convertStream (stream TempRequest) returns (stream TempResponse) {}
    }

    message TempRequest {
    double tempFahrenheit = 1;
    }

    message TempResponse {
    double tempCelsius = 1;
    }

    """

    @staticmethod
    def switchPower(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AC/switchPower',
            actuators__services__pb2.Empty.SerializeToString,
            actuators__services__pb2.TempPowerStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def changeTemperature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AC/changeTemperature',
            actuators__services__pb2.TempRequest.SerializeToString,
            actuators__services__pb2.TempResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
